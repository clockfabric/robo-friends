{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","id","name","email","react_default","a","createElement","className","src","concat","alt","Component","CardList","cardArray","robotsProp","map","user","src_Card","key","React","SearchBox","onChange","searchChange","type","placeholder","robots","username","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","filteredRobots","filter","robot","toLowerCase","includes","src_SearchBox","src_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiBeA,0LAdF,IAAAC,EACqBC,KAAKC,MAAxBC,EADFH,EACEG,GAAIC,EADNJ,EACMI,KAAMC,EADZL,EACYK,MACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,YAAwCS,IAAG,QAAAD,OAAUR,KAC7DG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,YARLQ,cCcJC,mLAXP,IAAMC,EAAYd,KAAKC,MAAMc,WAAWC,IAAI,SAACC,GACzC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKF,EAAKf,GAAIA,GAAIe,EAAKf,GAAIC,KAAMc,EAAKd,KAAMC,MAAOa,EAAKb,UAEzE,OACIC,EAAAC,EAAAC,cAAA,WACKO,UAPMM,IAAMR,WCadS,mLAZP,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIe,SAAUtB,KAAKC,MAAMsB,aACrBf,UAAU,mCACVgB,KAAK,SACLC,YAAY,0BARRL,IAAMR,WCFjBc,EAAS,CACpB,CACExB,GAAI,EACJC,KAAM,gBACNwB,SAAU,OACVvB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNwB,SAAU,YACVvB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNwB,SAAU,WACVvB,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNwB,SAAU,WACVvB,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNwB,SAAU,SACVvB,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNwB,SAAU,mBACVvB,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNwB,SAAU,eACVvB,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNwB,SAAU,gBACVvB,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNwB,SAAU,WACVvB,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNwB,SAAU,iBACVvB,MAAO,2BCtBIwB,cA9Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA9B,KAAA4B,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlC,QAOFmC,eAAiB,SAACC,GAChBP,EAAKQ,SACH,CACEC,YAAaF,EAAMG,OAAOC,SAT9BX,EAAKY,MAAQ,CACXf,OAAQA,EACRY,YAAa,IAJHT,wEAgBL,IAAAa,EAAA1C,KACD2C,EAAiB3C,KAAKyC,MAAMf,OAAOkB,OAAO,SAACC,GAC/C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASL,EAAKD,MAAMH,YAAYQ,iBAElE,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIL,GAAG,WAAWM,UAAU,MAA5B,eACAH,EAAAC,EAAAC,cAACyC,EAAD,CAAWzB,aAAcvB,KAAKmC,iBAC9B9B,EAAAC,EAAAC,cAAC0C,EAAD,CAAUlC,WAAY4B,YAzBZ/B,aCMEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ea87fb5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        const {id, name, email} = this.props;\r\n        return (\r\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <img src={`https://robohash.org/${id}?200x200`} alt={`robot${id}`} />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nclass CardList extends React.Component {\r\n    render() {\r\n        const cardArray = this.props.robotsProp.map((user) => {\r\n            return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n        });\r\n        return (\r\n            <div>\r\n                {cardArray}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nclass SearchBox extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"pa2\">\r\n                <input\r\n                    onChange={this.props.searchChange}\r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type=\"search\"\r\n                    placeholder=\"search robots\"/>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport {robots} from './robots';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: robots,\n      searchField: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState(\n      {\n        searchField: event.target.value\n      }\n    );\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1 id=\"logoText\" className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <CardList robotsProp={filteredRobots}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}